//
// ExtractNews.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ExtractNews: Codable, JSONEncodable, Hashable {

    public var author: String?
    public var entities: [Entitie]?
    public var image: String?
    public var language: String?
    public var publishDate: String?
    public var sentiment: Double?
    public var text: String?
    public var title: String?
    public var url: String?

    public init(author: String? = nil, entities: [Entitie]? = nil, image: String? = nil, language: String? = nil, publishDate: String? = nil, sentiment: Double? = nil, text: String? = nil, title: String? = nil, url: String? = nil) {
        self.author = author
        self.entities = entities
        self.image = image
        self.language = language
        self.publishDate = publishDate
        self.sentiment = sentiment
        self.text = text
        self.title = title
        self.url = url
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case author
        case entities
        case image
        case language
        case publishDate = "publish_date"
        case sentiment
        case text
        case title
        case url
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(author, forKey: .author)
        try container.encodeIfPresent(entities, forKey: .entities)
        try container.encodeIfPresent(image, forKey: .image)
        try container.encodeIfPresent(language, forKey: .language)
        try container.encodeIfPresent(publishDate, forKey: .publishDate)
        try container.encodeIfPresent(sentiment, forKey: .sentiment)
        try container.encodeIfPresent(text, forKey: .text)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(url, forKey: .url)
    }
}

