//
// SearchNewsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class SearchNewsAPI {

    /**
     search news
     
     - parameter apiKey: (header) API key 
     - parameter authors: (query) A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
     - parameter earliestPublishDate: (query) The news must have been published after this date. (optional)
     - parameter entities: (query) Filter news by entities, e.g. ORG:Tesla. (optional)
     - parameter language: (query) The ISO 6391 language code of the news, e.g. \&quot;en\&quot; for English. (optional)
     - parameter latestPublishDate: (query) The news must have been published before this date. (optional)
     - parameter locationFilter: (query) Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;, e.g. 51.050407, 13.737262, 100 (optional)
     - parameter maxSentiment: (query) The maximal sentiment of the news in range [-1,1]. (optional)
     - parameter minSentiment: (query) The minimal sentiment of the news in range [-1,1]. (optional)
     - parameter newsSources: (query) A comma-separated list of news sources from which the news should originate, e.g. https://www.bbc.co.uk (optional)
     - parameter number: (query) The number of news to return in range [1,100] (optional)
     - parameter offset: (query) The number of news to skip in range [0,1000] (optional)
     - parameter sort: (query) The sorting criteria. (publish-time or sentiment) (optional)
     - parameter sortDirection: (query) Whether to sort asc or desc. (optional)
     - parameter sourceCountries: (query) A comma-separated list of ISO 3166 country codes from which the news should originate, e.g. uk,us. (optional)
     - parameter text: (query) The text to match in the news content. (optional)
     - returns: NewsList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getNewsList(apiKey: String, authors: String? = nil, earliestPublishDate: String? = nil, entities: String? = nil, language: String? = nil, latestPublishDate: String? = nil, locationFilter: String? = nil, maxSentiment: String? = nil, minSentiment: String? = nil, newsSources: String? = nil, number: String? = nil, offset: String? = nil, sort: String? = nil, sortDirection: String? = nil, sourceCountries: String? = nil, text: String? = nil) async throws -> NewsList {
        return try await getNewsListWithRequestBuilder(apiKey: apiKey, authors: authors, earliestPublishDate: earliestPublishDate, entities: entities, language: language, latestPublishDate: latestPublishDate, locationFilter: locationFilter, maxSentiment: maxSentiment, minSentiment: minSentiment, newsSources: newsSources, number: number, offset: offset, sort: sort, sortDirection: sortDirection, sourceCountries: sourceCountries, text: text).execute().body
    }

    /**
     search news
     - GET /world_news/search-news
     - parameter apiKey: (header) API key 
     - parameter authors: (query) A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
     - parameter earliestPublishDate: (query) The news must have been published after this date. (optional)
     - parameter entities: (query) Filter news by entities, e.g. ORG:Tesla. (optional)
     - parameter language: (query) The ISO 6391 language code of the news, e.g. \&quot;en\&quot; for English. (optional)
     - parameter latestPublishDate: (query) The news must have been published before this date. (optional)
     - parameter locationFilter: (query) Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot;, e.g. 51.050407, 13.737262, 100 (optional)
     - parameter maxSentiment: (query) The maximal sentiment of the news in range [-1,1]. (optional)
     - parameter minSentiment: (query) The minimal sentiment of the news in range [-1,1]. (optional)
     - parameter newsSources: (query) A comma-separated list of news sources from which the news should originate, e.g. https://www.bbc.co.uk (optional)
     - parameter number: (query) The number of news to return in range [1,100] (optional)
     - parameter offset: (query) The number of news to skip in range [0,1000] (optional)
     - parameter sort: (query) The sorting criteria. (publish-time or sentiment) (optional)
     - parameter sortDirection: (query) Whether to sort asc or desc. (optional)
     - parameter sourceCountries: (query) A comma-separated list of ISO 3166 country codes from which the news should originate, e.g. uk,us. (optional)
     - parameter text: (query) The text to match in the news content. (optional)
     - returns: RequestBuilder<NewsList> 
     */
    open class func getNewsListWithRequestBuilder(apiKey: String, authors: String? = nil, earliestPublishDate: String? = nil, entities: String? = nil, language: String? = nil, latestPublishDate: String? = nil, locationFilter: String? = nil, maxSentiment: String? = nil, minSentiment: String? = nil, newsSources: String? = nil, number: String? = nil, offset: String? = nil, sort: String? = nil, sortDirection: String? = nil, sourceCountries: String? = nil, text: String? = nil) -> RequestBuilder<NewsList> {
        let localVariablePath = "/world_news/search-news"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "authors": (wrappedValue: authors?.encodeToJSON(), isExplode: true),
            "earliest-publish-date": (wrappedValue: earliestPublishDate?.encodeToJSON(), isExplode: true),
            "entities": (wrappedValue: entities?.encodeToJSON(), isExplode: true),
            "language": (wrappedValue: language?.encodeToJSON(), isExplode: true),
            "latest-publish-date": (wrappedValue: latestPublishDate?.encodeToJSON(), isExplode: true),
            "location-filter": (wrappedValue: locationFilter?.encodeToJSON(), isExplode: true),
            "max-sentiment": (wrappedValue: maxSentiment?.encodeToJSON(), isExplode: true),
            "min-sentiment": (wrappedValue: minSentiment?.encodeToJSON(), isExplode: true),
            "news-sources": (wrappedValue: newsSources?.encodeToJSON(), isExplode: true),
            "number": (wrappedValue: number?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
            "sort-direction": (wrappedValue: sortDirection?.encodeToJSON(), isExplode: true),
            "source-countries": (wrappedValue: sourceCountries?.encodeToJSON(), isExplode: true),
            "text": (wrappedValue: text?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "apiKey": apiKey.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NewsList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
